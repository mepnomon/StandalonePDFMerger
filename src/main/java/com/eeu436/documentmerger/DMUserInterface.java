/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eeu436.documentmerger;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/**
 * User Interface for Document Merger
 * @author D.B. Dressler
 */
public class DMUserInterface extends javax.swing.JFrame {

    //Global variables
    private DocumentMerger merger;
    private boolean mergeEnabled;
    private boolean removeEnabled;
    private DefaultListModel documentPaths;
    
    /**
     * Creates new form DMUserInterface
     */
    public DMUserInterface() {
        //instantiate merger
        merger = new DocumentMerger();
        // Control variable for merger button
        mergeEnabled = false;
        // Control variable for remove button
        removeEnabled = false;
        // List of document paths
        documentPaths = new DefaultListModel();
        initComponents();
        // Set gui defaults
        setDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusPane = new javax.swing.JTextPane();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        mergeButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDFMerger (c) 2017 D.B.Dressler");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("MainFrame"); // NOI18N
        setResizable(false);

        fileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(fileList);

        jScrollPane2.setViewportView(statusPane);

        addButton.setText("Add...");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove...");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        moveUpButton.setText("Move up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Move Down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        mergeButton.setText("Merge PDFs");
        mergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        jMenu3.setText("jMenu3");
        fileMenu.add(jMenu3);

        jMenuBar1.add(fileMenu);

        aboutMenu.setText("About");

        jMenu4.setText("jMenu4");
        aboutMenu.add(jMenu4);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(moveUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moveDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 419, Short.MAX_VALUE)
                        .addComponent(mergeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(319, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moveUpButton)
                    .addComponent(moveDownButton)
                    .addComponent(mergeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Set GUI defaults.
     */
    private void setDefaults(){
        //disable remove button
        removeButton.setEnabled(removeEnabled);
        //disable merge button
        mergeButton.setEnabled(mergeEnabled);
        //fill file list
        updateGUI();
    }
    
    /**
     * Updates the GUI.
     * Call this method after performing an operation.
     */
    private void updateGUI(){
        
        // Get list of documents in memory
        ArrayList<String> localDocumentList = merger.getList();
        // Clear the Paths displayed in GUI
        documentPaths.clear();
        
        // Add all documents to GUI
        for(int i = 0; i < localDocumentList.size(); i++){
            documentPaths.add(i, localDocumentList.get(i));
        }
        
        // Add to JLIst - actually displays in GUI
        fileList.setModel(documentPaths);
        
        // Check if dummy file name present
        boolean dummyFileName = true;
        if(!localDocumentList.get(0).equals(merger.dummyString)){
            dummyFileName = false;
        }
        
        // Enable/Disable buttons
        //if 1 documents in list and it's not the dummy
        if(documentPaths.size() == 1 && !dummyFileName){
            // Enable remove button
            removeEnabled = true;
        } else if(documentPaths.size() > 1){ //more than 1 file present
            // Enable remove and merge
            removeEnabled = true;
            mergeEnabled = true;
            
        } else { // no files present
            // Disable buttons
            mergeEnabled = false;
            removeEnabled = false;  
        }
        
        // Enable/Disable buttons
        mergeButton.setEnabled(mergeEnabled);
        removeButton.setEnabled(removeEnabled);
    }
    
    /**
     * 
     * @param evt 
     */
    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        merger.moveFileDown(fileList.getSelectedIndex());
        updateGUI();
    }//GEN-LAST:event_moveDownButtonActionPerformed

    /**
     * Select and add files to merge.
     * @param evt 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        
        // Debug
        System.out.println("add button pressed");
        // File Chooser
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(jMenu3);
        // get file path \ moo is a test value
        String filePath = "moo";
        filePath = chooser.getSelectedFile().toString();
        System.out.println("File:" + filePath);
        
        // Check if selected file's extension NOT pdf
        if(!filePath.substring(filePath.length()-3, 
                filePath.length()).equals("pdf")){
            
            System.out.println("Error, only load .pdf files.");
            // throw an error here
        } else {
            // pass file path to merger
            merger.addFilesToList(filePath);
            System.out.println("Adding: " + filePath);
        }
        // update list
        updateGUI();
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Performs functionality when remove button is pressed.
     * @param evt 
     */
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        
        merger.removeFileFromList(fileList.getSelectedIndex());
        updateGUI();
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * Performs functionality when merge button is pressed.
     * @param evt 
     */
    private void mergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeButtonActionPerformed
        
        //request output location:
        
        //dummy path
        String outputPath = "C:\\Users\\Mepnomon\\Desktop\\output.pdf";
        // set the path
        merger.setOutputPath(outputPath);
        // merge the files
        merger.mergeFiles();
        //clear documentList
        documentPaths.clear();
        //clear merger lists
        merger.clearLists();
        //update gui
        updateGUI();
    }//GEN-LAST:event_mergeButtonActionPerformed

    /**
     * 
     * @param evt 
     */
    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        merger.moveFileUp(fileList.getSelectedIndex());
        updateGUI();
    }//GEN-LAST:event_moveUpButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DMUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DMUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DMUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DMUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DMUserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JButton addButton;
    private javax.swing.JList<String> fileList;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mergeButton;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextPane statusPane;
    // End of variables declaration//GEN-END:variables
}
